" ~/ideavimrc

"source ~/.vimrc

"-----------------------------------------------------------------------------
"   Auto Commands
"-----------------------------------------------------------------------------

" Automatically source .ideavimrc on safe:
augroup autosourcing
    autocmd!
    autocmd BufWritePost .ideavimrc source %
augroup END

" Remember last cursor position in a file:
augroup vimrc-remember-cursor-position
  autocmd!
  autocmd BufReadPost * if line("'\"") > 1 && line("'\"") <= line("$") | exe "normal! g`\"" | endif
augroup END

" Wrap text in Markdown and text files:
autocmd BufRead,BufNewFile *.md,*.txt setlocal wrap



"-----------------------------------------------------------------------------
"   Appearance
"-----------------------------------------------------------------------------

" Strictly follow Vim keybindings and commands if conflicting with IntelliJ:
set ideastrictmode
" Use the OS clipboard:
set clipboard+=unnamed,unnamedplus
set clipboard+=ideaput
" Open new horizontal split below the actual:
set splitbelow
" Open new vertical split to the right of the actual:
set splitright
" Turn off all errorbells:
set noerrorbells
set belloff=all
" Turn on visual bell if an error occurs:
set visualbell
" Activate Vim join command consistend with IntelliJ:
set ideajoin
" Show the matching character (like at braces):
set showmatch
" Highlight all search results:
set hlsearch "...must be disabled for easymotion because of marking.
" Search while typing:
set incsearch
" Set default on case insensitive search:
set ignorecase
" Change to case sensitive search if capital letters are used:
set smartcase
" Set number of previous used commands (high numbers can consume more memory):
set history=1000
" Interpred normal mode mappings always on US keyboard layout:
:set keep-english-in-normal
" Enable full power of IntelliJ refactoring capabilities:
set idearefactormode=visual
" Display line numbers:
set number
" Start vertical scrolling by number of visible lines:
set scrolloff=3
" Start horizontal scrolling by number of visible columns:
set sidescrolloff=3
" Show command line if typing Vim commands:
set showcmd
" Show Vim mode in status bar:
set showmode
" Set maximum number of changes that can be undone:
set undolevels=1000
" Set time Vim waits to complete a whole key mapping sequence in milliseconds:
set timeout=1000
" Set time Vim waits for single key strokes in key mappings in milliseconds:
set timeoutlen=1000
" Use Vim in dialogs too:
set ideavimsupport=dialog
" Safe all buffers by executing ':w':
set ideawrite=all
" Set IdeaVim status icon to gray:
set ideastatusicon=gray



"-----------------------------------------------------------------------
" Key Mappings
"-----------------------------------------------------------------------

" Keep visual mode after indent with > or <
vmap < <gv
vmap > >gv

" Move visual blocks with J and K in visual mode:
vnoremap J :m '>+1<CR>gv=gv
vnoremap K :m '<-2<CR>gv=gv

" Set leader key from / to space:
let mapleader = ' '

" Clear search highlights ( qh):
nmap <Leader>qh :nohl<CR>

" Search everywhere ( ff):
nmap <Leader>ff :action SearchEverywhere<CR>

" Find in files ( ft):
nmap <Leader>ft :action FindInPath<CR>

" Show rescent files ( rf):
nnoremap <Leader>rf :action RecentFiles <CR>

" Redo (U):
nmap U <C-r>

" Enter visual block mode (vb):
nmap vb <C-v>

" Comment/uncomment lines:
nnoremap <Leader>/ :action CommentByLineComment <CR>
vnoremap <Leader>/ :action CommentByLineComment <CR>

" Go to declaration:
nnoremap gd :action GotoDeclaration <CR>


"-------------------------------------------------------------
"-- Splits (Buffer)

" Split buffer vertically ( v):
nmap <Leader>v <C-w>v

" Split buffer horizontally ( h):
nmap <Leader>h <C-w>s

" Go to right split (L):
nmap L <C-w>l

" Go to left split (H):
nmap H <C-w>h

" Go to split below (J):
nmap J <C-w>j

" Go to split above (K):
nmap K <C-w>k

" Equalize width and height for all splits ( es):
nmap <Leader>es <C-w>=

" Grow split vertical ( gv):
nmap <Leader>gv :vertical resize +5<CR>

" Shrink split vertical ( sv):
nmap <Leader>sv :vertical resize +5<CR>

" Grow split horizontally ( gh):
nmap <Leader>gh :resize +5

" Shrink split horizontally ( sh):
nmap <Leader>sh :resize -5



"-----------------------------------------------------------------------
"   NERDTree Plugin
"-----------------------------------------------------------------------

"https://github.com/JetBrains/ideavim/wiki/NERDTree-support

" Install plugin:
set NERDTree

"-------------------
" Commands
"+-----+-------------------------------+-----+-------------------------------+
"|  j  |  down                         |  k  |  up                           |
"+-----+-------------------------------+-----+-------------------------------+
"|  q  |  close project pane           |  P  |  jump to root node            |
"+-----+-------------------------------+-----+-------------------------------+
"|  o  |  open/close file/dir          |  go |  open/close but stay in tree  |
"+-----+-------------------------------+-----+-------------------------------+
"|  s  |  open in new vertical split   |  ⌘r |  rename                       |
"+-----+-------------------------------+-----+-------------------------------+
"|  ⌘d |  delete file/dir              |  ⌘n |  new file/dir                 |
"+-----+-------------------------------+-----+-------------------------------+
"|  ⌘c |  copy file/dir                |  ⌘x |  copy file/dir                |
"+-----+-------------------------------+-----+-------------------------------+
"|  ⌘v |  paste file/dir               |  ⌥n |  copy file/dir name           |
"+-----+-------------------------------+-----+-------------------------------+
"|  ⌥p |  copy path from content root  |     |                               |
"+-----+-------------------------------+-----+-------------------------------+

" Toggle tree ( tt):
nmap <Leader>tt :NERDTreeToggle<CR>
" Explore tree ( et):
nmap <Leader>et :NERDTreeFocus<CR>
" Show actual file in tree ( sft):
nmap <Leader>sft :NERDTreeFind<CR>
" Refresh tree ( rt):
nmap <Leader>rt :NERDTreeRefreshRoot

" Collapse tree ( ct):
" Collapse tree, keep paths to buffers ( cb):

let NERDTreeMinimalUI=1

" Show folding arrows:
let NERDTreeDirArrows=1

" Initial tree width:
let g:NERDTreeWinSize=46

" Show hidden files by default:
let NERDTreeShowHidden=1

" Start NERDTree if Vim starts.
autocmd VimEnter * NERDTree | wincmd p

" Open in new split but stay in tree (vs):
nmap vs s<CR><leader>sf



"-----------------------------------------------------------------------------
"   Easy Motion Plugin (install Ace Jump plugin in IDE!)
"-----------------------------------------------------------------------------

" https://github.com/easymotion/vim-easymotion

" Install plugin:
set easymotion

" This commands do not work properly:
" Hop to character in (multiple) buffer ( c):
nmap <Leader>c <Plug>(easymotion-s)
map  <Leader><Leader>f <Plug>(easymotion-bd-f)
nmap <Leader><Leader>f <Plug>(easymotion-overwin-f)

" Hop to word in (multiple) buffer ( w):
" nmap <Leader>w <Plug>(easymotion-bd-w)
map  <Leader>w <Plug>(easymotion-bd-w)
nmap <Leader>w <Plug>(easymotion-overwin-w)

" Hop to pattern in (multiple) buffer ( p):
nmap <Leader>p <Plug>(easymotion-jumptoanywhere)


" Hop to a line start in (multiple) buffer ( l):
nmap <Leader>l <Plug>(easymotion-bd-jk)
map <Leader>L <Plug>(easymotion-bd-jk)
nmap <Leader>L <Plug>(easymotion-overwin-line)











"-----------------------------------------------------------------------------
"   Vim Surround
"-----------------------------------------------------------------------------
"https://github.com/tpope/vim-surround

" Install plugin:
Plug 'tpope/vim-surround'


" Inside a surrounded element do: cs<actualSurroundChars><newSurroundChars>.
" ds is delete surrounding
"
" This behavior is for all the braces the same:
" cs<actualChar>{ : add curly braces with space.
" cs<actualChar>} : add curly braces without char.
"
" cs<actualChar>t : change to tags (pass tag in command line).
" cstt : change a surrounding tag to another tag.
" ysiw<char> : surrounds a word with <char> (ability to add another inside).
" ysiwt : surround with tags (pass tag in command line).
" ds<char> : delete surrounding <char>.
" dst : delete surrounding tags.
" yss<char> : surround content of a line with <char>
" VS<char> : surround content of a line with <char>, put <char> on new lines.
"


" Commentary plugin:
" https://github.com/JetBrains/ideavim/wiki/IdeaVim-Plugins
set commentary






















" Set steps to go back:
set undolevels=1000

"-----------------------------------------------------------------------
"-- Key Mappings
"-----------------------------------------------------------------------



" Open ~/.ideavimrc (\e):
nnoremap \e :e ~/.ideavimrc<CR>

" Source ~/.ideavimrc (\s):
nnoremap \s :action IdeaVim.ReloadVimRc.reload<CR>




"----------------------------------
"-- Move Keymaps

" Jump method up:
nnoremap [[ :action MethodUp<CR>

" Jump method down:
nnoremap ]] :action MethodDown<CR>

"nnoremap <leader>c :action CommentByLineComment<CR>




"----------------------------------
"-- Window Management Keymaps

" Split buffer vertically (y-axis) ( y):
nmap <Leader>y <C-w>v

" Split buffer horizontally (x-axis) ( x):
nmap <Leader>x <C-w>s

" Go to right split ( l):
nmap <Leader>l <C-w>l

" Go to left split ( h):
nmap <Leader>h <C-w>h

" Go to split below ( j):
nmap <Leader>j <C-w>j

" Go to split above ( k):
nmap <Leader>k <C-w>k

" Equalize width and height for all splits ( es):
nmap <Leader>es <C-w>=

" Close current split ( cs):
nmap <Leader>cs :close<CR>

" Open new tab ( ot):
nmap <Leader>ot :tabnew<CR>

" Exit current tab: ( et):
nmap <Leader>et :tabclose<CR>

" Go to next tab ( nt):
nmap <Leader>nt :tabn<CR>

" Go to previous tab ( pt):
nmap <Leader>pt :tabp<CR>


"----------------------------------
"-- Terminal Keymaps

" Open terminal ( tb):
nnoremap <Leader>tb :action ActivateTerminalToolWindow<CR>

" Open terminal in parent folder of current file ( tp):
nnoremap <Leader>tp :action Terminal.OpenInTerminal<CR>

